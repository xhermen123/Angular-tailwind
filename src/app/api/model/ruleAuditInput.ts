/**
 * Inbox API
 * Manage work for human moderators by adding, checking out and completing work items. Store User Generated Content to the database.  This will store it twice, once in short-term storage in it's exact form amd again in long term storage in it's redacted and pseudonymized form 
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@twohat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ClientIdOptional } from './clientIdOptional';
import { Decision } from './decision';
import { LanguageCode } from './languageCode';
import { Priority } from './priority';
import { ReviewsNeeded } from './reviewsNeeded';
import { RuleAuditData } from './ruleAuditData';
import { Topics } from './topics';

/**
 * Our primary purpose is as a content filter.  To achieve this you can manually add word patterns to the system.  But how do you know if it is creating errors like false positives.  To handle that we count how many times that rule is used in your new content and on key points like when it is said 100 times we bring it up here for review.  In this way you know you are working on the most impactful things first.  If the rule has already been added it will increase it's priority. 
 */
export interface RuleAuditInput { 
    language: LanguageCode;
    clientId?: ClientIdOptional;
    priority?: Priority;
    reviewsNeeded?: ReviewsNeeded;
    topics?: Topics;
    data: RuleAuditData;
    /**
     * What kind of rule audit is this for  - FIX_THIS | We recommend that when you filter an item you show on the screen of the user who tried to enter it that it was filtered.  They can press a button on your app to submit it as a false positive.  Likewise users that see chat can report them as false negatives.  Both are fix this.  We analyze what words and rules are used and on the xth time it is used (typically 10, 25, 50, 100, etc) we falg it for you to review. - RECENT_RULE | Whenever a rule is changed we return it in every UGC line we get for the next 14 days.  We count how many times it gets used and on the xth time we bring it up for you to review.  When you start with us this will review all the higher risk rules as well so you can check for false positives. 
     */
    type: RuleAuditInput.TypeEnum;
    decision?: Decision;
}
export namespace RuleAuditInput {
    export type TypeEnum = 'RECENT_RULE' | 'RULE_AUDIT' | 'FIX_THIS';
    export const TypeEnum = {
        RECENTRULE: 'RECENT_RULE' as TypeEnum,
        RULEAUDIT: 'RULE_AUDIT' as TypeEnum,
        FIXTHIS: 'FIX_THIS' as TypeEnum
    };
}