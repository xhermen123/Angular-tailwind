/**
 * Inbox API
 * Manage work for human moderators by adding, checking out and completing work items. Store User Generated Content to the database.  This will store it twice, once in short-term storage in it's exact form amd again in long term storage in it's redacted and pseudonymized form 
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@twohat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ClientIdOptional } from './clientIdOptional';
import { Decision } from './decision';
import { LanguageCode } from './languageCode';
import { Priority } from './priority';
import { ReviewsNeeded } from './reviewsNeeded';
import { UsernameData } from './usernameData';

export interface UsernameInput { 
    language: LanguageCode;
    clientId?: ClientIdOptional;
    priority?: Priority;
    /**
     * Unixtimestamp (milliseconds since Epoch) of when the item was originally said.  This is important for data retention when you import older data.
     */
    originalDate?: number;
    /**
     * Features to use to train AI, for internal sift use
     */
    features?: { [key: string]: any; };
    /**
     * What tags are associated with this item  To add or remove a tag use the POST .../review API endpoint 
     */
    tags?: Array<string>;
    /**
     * What kind of example is this  - FIX_THIS | We recommend that when you filter an item you show on the screen of the user who tried to enter it that it was filtered.  They can press a button on your app to submit it as a false positive.  Likewise users that see chat can report them as false negatives.  Both are fix this.  We analyze what words and rules are used and on the xth time it is used (typically 10, 25, 50, 100, etc) we falg it for you to review. - COMMON | We run a script every night and count which are yesterdays most common examples. - SAMPLE | WE run a script every night and sample the data per topic per risk level to create a QA queue - SAMPLE_ON_X | We run a script every night and sample usernames when the user has said their xth item.  If you set this number high you can     audit long-standing members with the assumption that all the names are clean as they would have been reported by now.  You can also use this    when you don't call our username feature and just want to sample some names. 
     */
    type: UsernameInput.TypeEnum;
    reviewsNeeded?: ReviewsNeeded;
    data: UsernameData;
    decision?: Decision;
}
export namespace UsernameInput {
    export type TypeEnum = 'FIX_THIS' | 'COMMON' | 'SAMPLE' | 'SAMPLE_ON_X';
    export const TypeEnum = {
        FIXTHIS: 'FIX_THIS' as TypeEnum,
        COMMON: 'COMMON' as TypeEnum,
        SAMPLE: 'SAMPLE' as TypeEnum,
        SAMPLEONX: 'SAMPLE_ON_X' as TypeEnum
    };
}