/**
 * Inbox API
 * Manage work for human moderators by adding, checking out and completing work items. Store User Generated Content to the database.  This will store it twice, once in short-term storage in it's exact form amd again in long term storage in it's redacted and pseudonymized form 
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@twohat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Queue } from '../model/queue';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { SIFTADMINServiceInterface }                            from './sIFTADMIN.serviceInterface';


@Injectable({
    providedIn: 'root'
})
export class SIFTADMINService implements SIFTADMINServiceInterface {

    protected basePath = 'https://localhost:3000/api/v1/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete a client and all their data
     * This will delete all data we have on a client. Typically called after a client leaves 
     * @param clientId The unique identifier for this client
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClient(clientId: number, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    public deleteClient(clientId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    public deleteClient(clientId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    public deleteClient(clientId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling deleteClient.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Queue>('delete',`${this.basePath}/inbox/client/${encodeURIComponent(String(clientId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a queue
     * This will remove this queue and if there are content inside it then that too.  If you are just trying to remove content then you should use ./items API endpoint.
     * @param queueId The unique identifier for this queue
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteQueue(queueId: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    public deleteQueue(queueId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    public deleteQueue(queueId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    public deleteQueue(queueId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling deleteQueue.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Queue>('delete',`${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a queue
     * A Queue is a group of work to be done by moderators.  This will create or update a queue.
     * @param queueId The unique identifier for this queue
     * @param body The queue to be added
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putQueue(queueId: string, body?: Queue, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    public putQueue(queueId: string, body?: Queue, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    public putQueue(queueId: string, body?: Queue, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    public putQueue(queueId: string, body?: Queue, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (queueId === null || queueId === undefined) {
            throw new Error('Required parameter queueId was null or undefined when calling putQueue.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Queue>('put',`${this.basePath}/inbox/queue/${encodeURIComponent(String(queueId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
